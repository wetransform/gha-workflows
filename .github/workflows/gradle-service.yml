on:
  workflow_call:
    inputs:
      build-tasks:
        description: Gradle tasks to run for building and verifying the project
        required: true
        type: string
      publish-tasks:
        description: Gradle tasks to run for publishing the project
        required: false
        default: ''
        type: string
      semantic-release:
        description: State if a release should be created using semantic-release if applicable
        default: false
        type: boolean
      semantic-release-dryrun:
        description: If semantic release should do a dryrun
        default: false
        type: boolean
      java-version:
        description: Java version to use for build
        required: true
        type: string
      notify-failure:
        description: Notify on build failure to Slack
        default: true
        type: boolean
      expect-tests:
        description: If JUnit test results are expected
        default: true
        type: boolean
      skip-build:
        description: Skip build/publishing and only scan vulnerabilities
        default: false
        type: boolean
      submodules:
        # see https://github.com/actions/checkout
        default: 'false'
        type: string
      java-options:
        description: Custom JAVA_TOOL_OPTIONS
        type: string
        default: ''
      image-tag:
        description: Image tag to scan after build
        required: true
        type: string
      image-tag-2:
        description: Additional image tag to scan after build
        type: string
        default: ''
      image-tag-3:
        description: Additional image tag to scan after build
        type: string
        default: ''
      multi-module:
        description: If this is a multi-module project
        type: boolean
        default: false
      skip-scan:
        description: If security scan and associated tasks should be skipped (e.g. in case no Gradle lock files are configured to be generated)
        type: boolean
        default: false
      checkout-ref:
        description: Custom ref to check out
        type: string
        default: ''
    outputs:
      release-published:
        description: If a release was created
        value: ${{ jobs.run.outputs.release-published }}
      release-version:
        description: The release version if a release was created
        value: ${{ jobs.run.outputs.release-version }}
    secrets:
      GH_PAT:
      #   required: true
      DOCKER_HUB_USERNAME:
      DOCKER_HUB_PASSWORD:
      DOCKER_HUB_EMAIL:
      WETF_ARTIFACTORY_USER:
      WETF_ARTIFACTORY_PASSWORD:
      SLACK_NOTIFICATIONS_BOT_TOKEN:
      WE_RELEASE_GITHUB_APP_ID:
      WE_RELEASE_GITHUB_PRIVATE_KEY:
      ENV_VARS: # secret for passing on additional env variables based on https://github.com/orgs/community/discussions/26671#discussioncomment-6776498

jobs:
  run:
    runs-on: ${{ vars.CUSTOM_RUNNER || 'ubuntu-latest' }}

    outputs:
      release-published: ${{ steps.gradle-release.outputs.release-published }}
      release-version: ${{ steps.gradle-release.outputs.release-version }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.checkout-ref }}
          submodules: ${{ inputs.submodules }}
          # do not persist credentials because this clashes with semantic-release action
          # (because the @semantic-release/git attempts to use them but needs permissions to bypass protection)
          persist-credentials: false
          # fetch-depth 0 is required to fetch all tags (and to determine the version based on tags)
          fetch-depth: ${{ inputs.publish-tasks != '' && '0' || '1' }}
          # provide a token in case submodules are enabled and private (secret is expected to be present)
          token: ${{ inputs.submodules != 'false' && secrets.GH_PAT || github.token }}

      # For each environment variable's key-value pair, mask the value from logs.
      - name: Populate custom environment variables
        id: environment_variables
        env:
          env_vars: ${{ secrets.ENV_VARS }}
        run: |
          if [ -z "$env_vars" ]; then
            exit 0
          else
            # Iterate over all key-value pairs passed into this workflow and
            # add them as environment variables for use in subsequent steps.
            # Keys prefixed with "BASE64_" will be decoded from base64 and the
            # prefix will be removed. E.g., "BASE64_KEY=value" becomes "KEY=value".
            for i in $env_vars; do
              if [[ $i == BASE64_* ]]; then i=$(echo $i | sed 's/^BASE64_//g' | sed 's/=.*//g')=$(echo ${i#*=} | base64 -di | base64 -di); fi
              echo ::add-mask::${i#*=}
              printf '%s\n' "$i" >> $GITHUB_ENV
            done
          fi

      #
      # Login to Docker Hub
      #
      # May be required for pulling images for testcontainers
      #
      - name: Login to DockerHub
        if: env.DOCKER_HUB_USERNAME
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}

      #
      # Build, test and create Docker image
      #

      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: temurin
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4.4.1

      - name: Build and test with Gradle
        if: ${{ !inputs.skip-build }}
        env:
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          ORG_GRADLE_PROJECT_dockerHubUsername: ${{ secrets.DOCKER_HUB_USERNAME }}
          ORG_GRADLE_PROJECT_dockerHubPassword: ${{ secrets.DOCKER_HUB_PASSWORD }}
          ORG_GRADLE_PROJECT_dockerHubEmail: ${{ secrets.DOCKER_HUB_EMAIL }}
          ORG_GRADLE_PROJECT_dockerHost: "unix:///var/run/docker.sock"
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}
        run: ./gradlew ${{ inputs.build-tasks }}

      - name: Upload Gradle test reports
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ !inputs.skip-build && always() }}
        with:
          name: Gradle test reports
          retention-days: 7
          path: |
            ${{ inputs.multi-module && '*/build/reports/tests' || 'build/reports/tests' }}

      #
      # Publish or release
      #
      # This is done before the test report because currently we allow publishing
      # even if there are open issues from the scan.
      #

      - name: Determine app token for release
        if: ${{ !inputs.skip-build && inputs.publish-tasks != '' && inputs.semantic-release }}
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: app-token
        with:
          app-id: ${{ secrets.WE_RELEASE_GITHUB_APP_ID }}
          private-key: "${{ secrets.WE_RELEASE_GITHUB_PRIVATE_KEY }}"

      - name: Publish/release with Gradle
        id: gradle-release
        if: ${{ !inputs.skip-build && inputs.publish-tasks != '' }}
        uses: wetransform/gha-gradle-semantic-release@8de25a0dc5423725c03999c687c26fa185368eed # v2.1.2
        with:
          publish-tasks: ${{ inputs.publish-tasks }}
          release: ${{ inputs.semantic-release }}
          release-dryrun: ${{ inputs.semantic-release-dryrun }}
          github-token: ${{ steps.app-token.outputs.token }}
        env:
          # For Gradle execution
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}

          ORG_GRADLE_PROJECT_dockerHubUsername: ${{ secrets.DOCKER_HUB_USERNAME }}
          ORG_GRADLE_PROJECT_dockerHubPassword: ${{ secrets.DOCKER_HUB_PASSWORD }}
          ORG_GRADLE_PROJECT_dockerHubEmail: ${{ secrets.DOCKER_HUB_EMAIL }}
          ORG_GRADLE_PROJECT_dockerHost: "unix:///var/run/docker.sock"

      #
      # Security scans
      #

      - name: Make sure test-results folder exists
        if: ${{ !inputs.skip-scan }}
        run: mkdir -p ${{ inputs.multi-module && 'trivy-gha-scan/build/test-results' || 'build/test-results' }}

      - name: Vulnerability scan
        if: ${{ !inputs.skip-scan }}
        uses: wetransform/gha-trivy@051dfb66966286ebd8be8e3c7f026d00fd4bf409 # v2.3.5
        with:
          image-ref: 'docker.io/${{ inputs.image-tag }}'
          junit-test-output: "${{ inputs.multi-module && 'trivy-gha-scan/build/test-results/trivy.xml' || 'build/test-results/trivy.xml' }}" # added to unit test report
          report-retention-days: 30
          report-tag: ${{ inputs.image-tag }}

      - name: Vulnerability scan (Image 2)
        uses: wetransform/gha-trivy@051dfb66966286ebd8be8e3c7f026d00fd4bf409 # v2.3.5
        if: ${{ !inputs.skip-scan && inputs.image-tag-2 != '' }}
        with:
          image-ref: 'docker.io/${{ inputs.image-tag-2 }}'
          junit-test-output: "${{ inputs.multi-module && 'trivy-gha-scan/build/test-results/trivy-2.xml' || 'build/test-results/trivy-2.xml' }}" # added to unit test report
          report-retention-days: 30
          report-tag: ${{ inputs.image-tag-2 }}

      - name: Vulnerability scan (Image 3)
        uses: wetransform/gha-trivy@051dfb66966286ebd8be8e3c7f026d00fd4bf409 # v2.3.5
        if: ${{ !inputs.skip-scan && inputs.image-tag-3 != '' }}
        with:
          image-ref: 'docker.io/${{ inputs.image-tag-3 }}'
          junit-test-output: "${{ inputs.multi-module && 'trivy-gha-scan/build/test-results/trivy-3.xml' || 'build/test-results/trivy-3.xml' }}" # added to unit test report
          report-retention-days: 30
          report-tag: ${{ inputs.image-tag-3 }}

      #
      # Report on unit tests and critical vulnerabilities
      #

        # https://github.com/marketplace/actions/junit-report-action
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@a83fd2b5d58d4fc702e690c1ea688d702d28d281 # v5.6.1
        if: always() # always run even if the previous step fails
        with:
          report_paths: "${{ inputs.multi-module && '*/build/test-results/**/*.xml' || 'build/test-results/**/*.xml' }}"
          require_tests: ${{ !inputs.skip-build && inputs.expect-tests }}

          # Workaround for check that is additionally created being associated
          # to the wrong workflow/run. Instead not additional check is created.
          # See https://github.com/mikepenz/action-junit-report/issues/40
          annotate_only: true
          detailed_summary: true
          fail_on_failure: true # in case of critical security vulnerabilities, also required for Slack notification if only tests fail

      #
      # Report build failure to Slack
      #

        # https://github.com/marketplace/actions/slack-notify-build
      - name: Notify slack fail
        if: ${{ inputs.notify-failure && failure() }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@3665186a8c1a022b28a1dbe0954e73aa9081ea9e # v1.6.0
        with:
          channel: build-failures
          status: FAILED
          color: danger
