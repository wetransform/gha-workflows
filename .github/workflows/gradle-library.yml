on:
  workflow_call:
    inputs:
      build-tasks:
        description: Gradle tasks to run for building and verifying the project
        required: true
        type: string
      publish-tasks:
        description: Gradle tasks to run for publishing the project
        required: false
        default: ''
        type: string
      semantic-release:
        description: State if a release should be created using semantic-release if applicable
        default: false
        type: boolean
      semantic-release-dryrun:
        description: If semantic release should do a dryrun
        default: false
        type: boolean
      java-version:
        description: Java version to use for build
        required: true
        type: string
      notify-failure:
        description: Notify on build failure to Slack
        default: true
        type: boolean
      skip-build:
        description: Skip build/publishing and only scan vulnerabilities
        default: false
        type: boolean
      expect-tests:
        description: If JUnit test results are expected
        default: true
        type: boolean
      fail-on-test-failure:
        description: If the job should fail if tests fail
        default: true
        type: boolean
      submodules:
        # see https://github.com/actions/checkout
        default: 'false'
        type: string
      pre-build-command:
        description: Custom command to run before the build
        type: string
        default: ''
      java-options:
        description: Custom JAVA_TOOL_OPTIONS
        type: string
        default: ''
      upload-artifact-path:
        description: Path for artifact to upload (to reuse in another job)
        type: string
        default: ''
      upload-artifact-name:
        description: Name for artifact to upload (to reuse in another job)
        type: string
        default: build-artifact
      multi-module:
        description: If this is a multi-module project
        type: boolean
        default: false
      skip-scan:
        description: If security scan and associated tasks should be skipped (e.g. in case no Gradle lock files are configured to be generated)
        type: boolean
        default: false
      checkout-ref:
        description: Custom ref to check out
        type: string
        default: ''
    outputs:
      release-published:
        description: If a release was created
        value: ${{ jobs.run.outputs.release-published }}
      release-version:
        description: The release version if a release was created
        value: ${{ jobs.run.outputs.release-version }}
    secrets:
      # GH_PAT:
      #   required: true
      WETF_ARTIFACTORY_USER:
      WETF_ARTIFACTORY_PASSWORD:
      DOCKER_HUB_USERNAME:
      DOCKER_HUB_PASSWORD:
      DOCKER_HUB_EMAIL:
      SLACK_NOTIFICATIONS_BOT_TOKEN:
      WE_RELEASE_GITHUB_APP_ID:
      WE_RELEASE_GITHUB_PRIVATE_KEY:

jobs:
  run:
    runs-on: ubuntu-latest

    outputs:
      release-published: ${{ steps.gradle-release.outputs.release-published }}
      release-version: ${{ steps.gradle-release.outputs.release-version }}

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ inputs.checkout-ref }}
          submodules: ${{ inputs.submodules }}
          # do not persist credentials because this clashes with semantic-release action
          # (because the @semantic-release/git attempts to use them but needs permissions to bypass protection)
          persist-credentials: false
          # fetch-depth 0 is required to fetch all tags (and to determine the version based on tags)
          fetch-depth: ${{ inputs.publish-tasks != '' && '0' || '1' }}

      #
      # Build, test and create Docker image
      #

      - uses: actions/setup-java@6a0805fcefea3d4657a47ac4c165951e33482018 # v4.2.2
        with:
          distribution: temurin
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@d9c87d481d55275bb5441eef3fe0e46805f9ef70 # v3.5.0

      - name: Write dependency lockfile for security scan
        if: ${{ !inputs.skip-scan }}
        env:
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}
        run: ./gradlew dependencies --write-locks

      - name: Write dependency lockfile for security scan (submodules)
        if: ${{ !inputs.skip-scan && inputs.multi-module }}
        env:
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}
        shell: bash
        run: |
          # Find all subfolders containing build.gradle or build.gradle.kts files
          folders=$(find . -type f \( -name "build.gradle" -o -name "build.gradle.kts" \) -exec dirname {} \; | grep -oP '(?<=^\./).*' | sort -u)

          # Loop over the identified subfolders
          for folder in $folders; do
            echo "Processing subproject: $folder"

            ./gradlew ":${folder//\//:}:dependencies" --write-locks
          done

      - name: Run custom command
        if: ${{ inputs.pre-build-command != '' }}
        run: ${{ inputs.pre-build-command }}

      - name: Build and test with Gradle
        if: ${{ !inputs.skip-build }}
        env:
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}

          # e.g. for pulling images for testcontainers
          ORG_GRADLE_PROJECT_dockerHubUsername: ${{ secrets.DOCKER_HUB_USERNAME }}
          ORG_GRADLE_PROJECT_dockerHubPassword: ${{ secrets.DOCKER_HUB_PASSWORD }}
          ORG_GRADLE_PROJECT_dockerHubEmail: ${{ secrets.DOCKER_HUB_EMAIL }}
          ORG_GRADLE_PROJECT_dockerHost: "unix:///var/run/docker.sock"
        run: ./gradlew ${{ inputs.build-tasks }}

      - name: Upload Gradle test reports
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        if: ${{ !inputs.skip-build && always() }}
        with:
          name: Gradle test reports
          retention-days: 7
          path: ${{ inputs.multi-module && '**/build/reports/tests' || 'build/reports/tests' }}

      #
      # Security scans
      #

      - name: Make sure test-results folder exists
        if: ${{ !inputs.skip-scan }}
        run: mkdir -p ${{ inputs.multi-module && 'trivy-gha-scan/build/test-results' || 'build/test-results' }}

      - name: Vulnerability scan
        if: ${{ !inputs.skip-scan }}
        uses: wetransform/gha-trivy@8915cc9f5106f6683462a6eec9d093649e50a345 # v2.1.0
        with:
          junit-test-output: "${{ inputs.multi-module && 'trivy-gha-scan/build/test-results/trivy.xml' || 'build/test-results/trivy.xml' }}" # added to unit test report
          report-retention-days: 30

      #
      # Publish or release
      #
      # This is done before the test report because currently we allow publishing
      # even if there are open issues from the scan.
      #

      - name: Determine app token for release
        if: ${{ !inputs.skip-build && inputs.publish-tasks != '' && inputs.semantic-release }}
        uses: actions/create-github-app-token@31c86eb3b33c9b601a1f60f98dcbfd1d70f379b4 # v1.10.3
        id: app-token
        with:
          app-id: ${{ secrets.WE_RELEASE_GITHUB_APP_ID }}
          private-key: "${{ secrets.WE_RELEASE_GITHUB_PRIVATE_KEY }}"

      - name: Publish/release with Gradle
        id: gradle-release
        if: ${{ !inputs.skip-build && inputs.publish-tasks != '' }}
        uses: wetransform/gha-gradle-semantic-release@7df5afac738e0cf1ffb38917c17a6c4a5357a5af # v2.1.0
        with:
          publish-tasks: ${{ inputs.publish-tasks }}
          release: ${{ inputs.semantic-release }}
          release-dryrun: ${{ inputs.semantic-release-dryrun }}
          github-token: ${{ steps.app-token.outputs.token }}
        env:
          # For Gradle execution
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}

          # e.g. for pulling images for testcontainers
          # ORG_GRADLE_PROJECT_dockerHubUsername: ${{ secrets.DOCKER_HUB_USERNAME }}
          # ORG_GRADLE_PROJECT_dockerHubPassword: ${{ secrets.DOCKER_HUB_PASSWORD }}
          # ORG_GRADLE_PROJECT_dockerHubEmail: ${{ secrets.DOCKER_HUB_EMAIL }}
          # ORG_GRADLE_PROJECT_dockerHost: "unix:///var/run/docker.sock"


      #
      # Report on unit tests and critical vulnerabilities
      #

        # https://github.com/marketplace/actions/junit-report-action
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@db71d41eb79864e25ab0337e395c352e84523afe # v4.3.1
        if: always() # always run even if the previous step fails
        with:
          report_paths: "${{ inputs.multi-module && '**/build/test-results/**/*.xml' || 'build/test-results/**/*.xml' }}"
          require_tests: ${{ !inputs.skip-build && inputs.expect-tests }}

          # Workaround for check that is additionally created being associated
          # to the wrong workflow/run. Instead not additional check is created.
          # See https://github.com/mikepenz/action-junit-report/issues/40
          annotate_only: true
          detailed_summary: true
          fail_on_failure: ${{ inputs.fail-on-test-failure }} # e.g. in case of critical security vulnerabilities

      #
      # Upload artifact
      #
      - name: Upload artifact
        if: ${{ inputs.upload-artifact-path != '' }}
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: ${{ inputs.upload-artifact-name }}
          path: ${{ inputs.upload-artifact-path }}
          retention-days: 7

      #
      # Report build failure to Slack
      #

        # https://github.com/marketplace/actions/slack-notify-build
      - name: Notify slack fail
        if: ${{ inputs.notify-failure && failure() }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@3665186a8c1a022b28a1dbe0954e73aa9081ea9e # v1.6.0
        with:
          channel: build-failures
          status: FAILED
          color: danger
