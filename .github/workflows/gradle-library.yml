on:
  workflow_call:
    inputs:
      gradle-tasks:
        description: Tasks to run
        required: true
        type: string
      java-version:
        description: Java version to use for build
        required: true
        type: string
      notify-failure:
        description: Notify on build failure to Slack
        default: true
        type: boolean
      skip-build:
        description: Skip build and only scan vulnerabilities
        default: false
        type: boolean
      expect-tests:
        description: If JUnit test results are expected
        default: true
        type: boolean
      fail-on-test-failure:
        description: If the job should fail if tests fail
        default: true
        type: boolean
      submodules:
        # see https://github.com/actions/checkout
        default: 'false'
        type: string
      pre-build-command:
        description: Custom command to run before the build
        type: string
        default: ''
      java-options:
        description: Custom JAVA_TOOL_OPTIONS
        type: string
        default: ''
      upload-artifact-path:
        description: Path for artifact to upload (to reuse in another job)
        type: string
        default: ''
      upload-artifact-name:
        description: Name for artifact to upload (to reuse in another job)
        type: string
        default: build-artifact
      multi-module:
        description: If this is a multi-module project
        type: boolean
        default: false
    secrets:
      # GH_PAT:
      #   required: true
      WETF_ARTIFACTORY_USER:
      WETF_ARTIFACTORY_PASSWORD:
      DOCKER_HUB_USERNAME:
      DOCKER_HUB_PASSWORD:
      DOCKER_HUB_EMAIL:
      SLACK_NOTIFICATIONS_BOT_TOKEN:

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          submodules: ${{ inputs.submodules }}

      #
      # Build, test and create Docker image
      #

      - uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
        with:
          distribution: temurin
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@a8f75513eafdebd8141bd1cd4e30fcd194af8dfa # v2.12.0

      - name: Write dependency lockfile for security scan
        env:
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}
        run: ./gradlew dependencies --write-locks

      - name: Write dependency lockfile for security scan (submodules)
        if: ${{ inputs.multi-module }}
        env:
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}
        shell: bash
        run: |
          # Find all subfolders containing build.gradle or build.gradle.kts files
          folders=$(find . -type f \( -name "build.gradle" -o -name "build.gradle.kts" \) -exec dirname {} \; | grep -oP '(?<=^\./).*' | sort -u)

          # Loop over the identified subfolders
          for folder in $folders; do
            echo "Processing subproject: $folder"

            ./gradlew ":${folder}:dependencies" --write-locks
          done

      - name: Run custom command
        if: ${{ inputs.pre-build-command != '' }}
        run: ${{ inputs.pre-build-command }}

      - name: Build and test with Gradle
        if: ${{ !inputs.skip-build }}
        env:
          ORG_GRADLE_PROJECT_wetfArtifactoryUser: ${{ secrets.WETF_ARTIFACTORY_USER }}
          ORG_GRADLE_PROJECT_wetfArtifactoryPassword: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
          JAVA_TOOL_OPTIONS: ${{ inputs.java-options }}

          # e.g. for pulling images for testcontainers
          ORG_GRADLE_PROJECT_dockerHubUsername: ${{ secrets.DOCKER_HUB_USERNAME }}
          ORG_GRADLE_PROJECT_dockerHubPassword: ${{ secrets.DOCKER_HUB_PASSWORD }}
          ORG_GRADLE_PROJECT_dockerHubEmail: ${{ secrets.DOCKER_HUB_EMAIL }}
          ORG_GRADLE_PROJECT_dockerHost: "unix:///var/run/docker.sock"
        run: ./gradlew ${{ inputs.gradle-tasks }}

      - name: Upload Gradle test reports
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        if: ${{ !inputs.skip-build && always() }}
        with:
          name: Gradle test reports
          retention-days: 7
          path: ${{ inputs.multi-module && '*/build/reports/tests' || 'build/reports/tests' }}

      #
      # Security scans
      #

      - name: Make sure test-results folder exists
        run: mkdir -p ${{ inputs.multi-module && 'trivy-gha-scan/build/test-results' || 'build/test-results' }}

      - name: Vulnerability scan
        uses: wetransform/gha-trivy@master
        with:
          junit-test-output: "${{ inputs.multi-module && 'trivy-gha-scan/build/test-results/trivy.xml' || 'build/test-results/trivy.xml' }}" # added to unit test report
          report-retention-days: 30

      #
      # Report on unit tests and critical vulnerabilities
      #

        # https://github.com/marketplace/actions/junit-report-action
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@150e2f992e4fad1379da2056d1d1c279f520e058 # v3.8.0
        if: always() # always run even if the previous step fails
        with:
          report_paths: "${{ inputs.multi-module && '*/build/test-results/**/*.xml' || 'build/test-results/**/*.xml' }}"
          require_tests: ${{ !inputs.skip-build && inputs.expect-tests }}

          # Workaround for check that is additionally created being associated
          # to the wrong workflow/run. Instead not additional check is created.
          # See https://github.com/mikepenz/action-junit-report/issues/40
          annotate_only: true
          detailed_summary: true
          fail_on_failure: ${{ inputs.fail-on-test-failure }} # e.g. in case of critical security vulnerabilities

      #
      # Upload artifact
      #
      - name: Upload artifact
        if: ${{ inputs.upload-artifact-path != '' }}
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: ${{ inputs.upload-artifact-name }}
          path: ${{ inputs.upload-artifact-path }}
          retention-days: 7

      #
      # Report build failure to Slack
      #

        # https://github.com/marketplace/actions/slack-notify-build
      - name: Notify slack fail
        if: ${{ inputs.notify-failure && failure() }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@3665186a8c1a022b28a1dbe0954e73aa9081ea9e # v1.6.0
        with:
          channel: build-failures
          status: FAILED
          color: danger
