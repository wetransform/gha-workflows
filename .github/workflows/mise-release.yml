#
# Mise release workflow
#
# Intended to be run on the default branch to create a release, either manually or automatically.
#
# Conventions:
# - workflow uses mise environment "ci"
# - should have a mise task named "ci:verify-release" (this can be an empty task if no verification is needed)
# - should have a mise task named "ci:set-version" with argument "--version" that sets the version of the project to the given version (not required for variants: npm)
#
# Variants:
# - npm: Set version via "npm version" (task "ci:set-version" not required), adds package.json and package-lock.json files to release assets
#

on:
  workflow_call:
    inputs:
      variant:
        description: Workflow variant to use (leave empty or use one of 'npm')
        required: true
        type: string
      dry-run:
        description: If the release should be a dry run (no actual release creation)
        required: false
        default: false
        type: boolean
    secrets:
      WE_RELEASE_GITHUB_APP_ID:
        required: true
      WE_RELEASE_GITHUB_PRIVATE_KEY:
        required: true

env:
  # renovate: datasource=npm depName=@semantic-release/changelog
  SEMANTIC_RELEASE_CHANGELOG_VERSION: 6.0.3

  # renovate: datasource=npm depName=@semantic-release/exec
  SEMANTIC_RELEASE_EXEC_VERSION: 7.1.0

  # renovate: datasource=npm depName=@semantic-release/git
  SEMANTIC_RELEASE_GIT_VERSION: 10.0.1

  # renovate: datasource=npm depName=conventional-changelog-conventionalcommits
  CONVENTIONAL_CHANGELOG_CONVENTIONALCOMMITS_VERSION: 9.1.0

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Determine app token for release
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        id: app-token
        with:
          app-id: ${{ secrets.WE_RELEASE_GITHUB_APP_ID }}
          private-key: ${{ secrets.WE_RELEASE_GITHUB_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ steps.app-token.outputs.token }}
          # fetch-depth 0 is required to fetch all tags (and to determine the version based on tags)
          fetch-depth: 0

      #
      # Setup mise & tools
      #
      - name: Setup mise & tools
        uses: jdx/mise-action@v2

      #
      # Create conventional release configuration file if not present
      #
      - name: Create release configuration file
        if: ${{ hashFiles('.releaserc.yml') == '' }}
        shell: bash
        run: |
          VERIFY_CMD="mise run ci:verify-release"

          if [ "${{ inputs.variant }}" = "npm" ]; then
            PREPARE_CMD="mise exec -- npm version --no-git-tag-version \${nextRelease.version}"
            ASSETS="[CHANGELOG.md, \"**/package.json\", \"**/package-lock.json\"]"
          else
            PREPARE_CMD="mise run ci:set-version --version \${nextRelease.version}"
            ASSETS="[CHANGELOG.md]"
          fi

          cat <<EOF > .releaserc.yml
          ---
          branches: ${{ github.head_ref || github.ref_name }}

          plugins:
            - - "@semantic-release/commit-analyzer"
              # see https://github.com/semantic-release/commit-analyzer?tab=readme-ov-file#options
              - preset: conventionalcommits
            - - "@semantic-release/release-notes-generator"
              # see https://github.com/semantic-release/release-notes-generator?tab=readme-ov-file#options
              - preset: conventionalcommits
                presetConfig:
                  issuePrefixes: ['ING-', 'WGS-', 'SVC-']
                  issueUrlFormat: 'https://wetransform.atlassian.net/browse/{{prefix}}{{id}}'
                # parserOpts:
                  # https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#referenceactions
                  # set to null to reference an issue without action (but will still show it "closes" the issue in the changelog)
                  # referenceActions: null
            - "@semantic-release/changelog"
            - - "@semantic-release/exec"
                # verify if a release can be created before taking any action
              - verifyReleaseCmd: ${VERIFY_CMD}

                # prepare - set release version, test and build if applicable
                prepareCmd: ${PREPARE_CMD}

                # publish - perform publishing tasks
                # per convention done based on created Git tag
                # publishCmd:

                # success - perform post-release tasks
                # successCmd:
            - - "@semantic-release/git"
              - assets: ${ASSETS}
                # important to not skip ci, so publishing is triggered for created tag
                message: "chore(release): \${nextRelease.version}\n\n\${nextRelease.notes}"
            - "@semantic-release/github"
          EOF

          # Print for verification/debugging
          echo ">>> Created .releaserc.yml with contents:"
          cat .releaserc.yml
          echo ">>>"

      - name: Install NodeJs (for semantic-release)
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: 24

      #
      # Perform release
      #
      - name: Release
        id: release
        uses: cycjimmy/semantic-release-action@9cc899c47e6841430bbaedb43de1560a568dfd16 # v5.0.0
        env:
          # Permissions needed
          #   contents: write
          #   issues: write
          #   pull-requests: write
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GIT_AUTHOR_NAME: wetransform Bot
          GIT_AUTHOR_EMAIL: 113353961+wetransformer@users.noreply.github.com
          GIT_COMMITTER_NAME: wetransform Bot
          GIT_COMMITTER_EMAIL: 113353961+wetransformer@users.noreply.github.com
          RUNNER_DEBUG: 1

          MISE_ENV: ci
        with:
          dry_run: ${{ inputs.dry-run }}
          semantic_version: 24.2.8

          extra_plugins:
            "@semantic-release/changelog@\
            ${{ env.SEMANTIC_RELEASE_CHANGELOG_VERSION }} \
            @semantic-release/exec@\
            ${{ env.SEMANTIC_RELEASE_EXEC_VERSION }} \
            @semantic-release/git@\
            ${{ env.SEMANTIC_RELEASE_GIT_VERSION }} \
            conventional-changelog-conventionalcommits@\
            ${{ env.CONVENTIONAL_CHANGELOG_CONVENTIONALCOMMITS_VERSION }} \
            "
